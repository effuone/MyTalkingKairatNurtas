/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useEffect, useRef} from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

export default function Model({ ...props }) {
  const group = useRef();
  const previousAction = usePrevious(props.action);
  const { nodes, materials, animations } = useGLTF('/kaireke.glb')
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    if (previousAction) {
      actions[previousAction].fadeOut(0.2);
      actions[props.action].stop();
    }
    actions[props.action].play();
  }, [actions, props.action, previousAction]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="MAINArmature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="unamed" geometry={nodes.unamed.geometry} material={materials['Material.003']} skeleton={nodes.unamed.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/kaireke.glb')

function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  const ref = useRef();
  // Store current value in ref
  useEffect(() => {
    ref.current = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)
  return ref.current;
}